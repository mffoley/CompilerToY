Terminals unused in grammar

    TRUE
    FALSE
    MOD
    AND
    OR
    NOT
    COMMENT
    EQU
    LTE
    GTE
    NEQ
    NEGATE
    ADD
    SUB
    MUL
    DIV
    LT
    GT


State 34 conflicts: 1 shift/reduce
State 75 conflicts: 1 shift/reduce


Grammar

    0 $accept: input $end

    1 input: ε
    2      | input line

    3 line: EOL
    4     | pgm EOL

    5 pgm2: ε
    6     | proc pgm2
    7     | struct_ pgm2

    8 pgm: proc pgm2
    9    | struct_

   10 exp: ε
   11    | int_literal

   12 int_literal: NUMBER

   13 type: INT
   14     | BOOL
   15     | STRING
   16     | ID

   17 declaration: type ID
   18            | declaration COMMA declaration

   19 return_type: type
   20            | VOID

   21 struct_: STRUCT Name OB declaration CB

   22 l_exp: ID
   23      | ID DOT l_exp

   24 intern_scope_then: THEN

   25 intern_scope_else: ELSE

   26 stmt: FOR OP ID ASSIGN exp SEMICOLON exp SEMICOLON stmt CP stmt
   27     | IF OP exp CP intern_scope_then stmt
   28     | IF OP exp CP intern_scope_then stmt intern_scope_else stmt
   29     | PRINTF OP STRING CP SEMICOLON
   30     | RETURN exp SEMICOLON
   31     | OB stmt_seq CB
   32     | type ID SEMICOLON
   33     | l_exp ASSIGN exp SEMICOLON

   34 stmt_seq: ε
   35         | stmt stmt_seq

   36 Name: ID

   37 proc: return_type Name OP declaration CP OB stmt_seq CB


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    BOOL (258) 14
    TRUE (259)
    FALSE (260)
    VOID (261) 20
    PRINTF (262) 29
    STRUCT (263) 21
    IF (264) 27 28
    THEN (265) 24
    ELSE (266) 25
    FOR (267) 26
    RETURN (268) 30
    MOD (269)
    INT (270) 13
    AND (271)
    OR (272)
    NOT (273)
    ID <str> (274) 16 17 22 23 26 32 36
    NUMBER <val> (275) 12
    STRING (276) 15 29
    COMMENT (277)
    EOL (278) 3 4
    EQU (279)
    LTE (280)
    GTE (281)
    NEQ (282)
    OB (283) 21 31 37
    CB (284) 21 31 37
    SEMICOLON (285) 26 29 30 32 33
    NEGATE (286)
    OP (287) 26 27 28 29 37
    CP (288) 26 27 28 29 37
    ADD (289)
    SUB (290)
    MUL (291)
    DIV (292)
    DOT (293) 23
    COMMA (294) 18
    ASSIGN (295) 26 33
    LT (296)
    GT (297)


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    input (44)
        on left: 1 2
        on right: 0 2
    line (45)
        on left: 3 4
        on right: 2
    pgm2 (46)
        on left: 5 6 7
        on right: 6 7 8
    pgm (47)
        on left: 8 9
        on right: 4
    exp <val> (48)
        on left: 10 11
        on right: 26 27 28 30 33
    int_literal <val> (49)
        on left: 12
        on right: 11
    type <val> (50)
        on left: 13 14 15 16
        on right: 17 19 32
    declaration <val> (51)
        on left: 17 18
        on right: 18 21 37
    return_type (52)
        on left: 19 20
        on right: 37
    struct_ <val> (53)
        on left: 21
        on right: 7 9
    l_exp <val> (54)
        on left: 22 23
        on right: 23 33
    intern_scope_then (55)
        on left: 24
        on right: 27 28
    intern_scope_else (56)
        on left: 25
        on right: 28
    stmt <val> (57)
        on left: 26 27 28 29 30 31 32 33
        on right: 26 27 28 35
    stmt_seq <val> (58)
        on left: 34 35
        on right: 31 35 37
    Name <val> (59)
        on left: 36
        on right: 21 37
    proc <val> (60)
        on left: 37
        on right: 6 8


State 0

    0 $accept: • input $end

    $default  reduce using rule 1 (input)

    input  go to state 1


State 1

    0 $accept: input • $end
    2 input: input • line

    $end    shift, and go to state 2
    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    STRUCT  shift, and go to state 5
    INT     shift, and go to state 6
    ID      shift, and go to state 7
    STRING  shift, and go to state 8
    EOL     shift, and go to state 9

    line         go to state 10
    pgm          go to state 11
    type         go to state 12
    return_type  go to state 13
    struct_      go to state 14
    proc         go to state 15


State 2

    0 $accept: input $end •

    $default  accept


State 3

   14 type: BOOL •

    $default  reduce using rule 14 (type)


State 4

   20 return_type: VOID •

    $default  reduce using rule 20 (return_type)


State 5

   21 struct_: STRUCT • Name OB declaration CB

    ID  shift, and go to state 16

    Name  go to state 17


State 6

   13 type: INT •

    $default  reduce using rule 13 (type)


State 7

   16 type: ID •

    $default  reduce using rule 16 (type)


State 8

   15 type: STRING •

    $default  reduce using rule 15 (type)


State 9

    3 line: EOL •

    $default  reduce using rule 3 (line)


State 10

    2 input: input line •

    $default  reduce using rule 2 (input)


State 11

    4 line: pgm • EOL

    EOL  shift, and go to state 18


State 12

   19 return_type: type •

    $default  reduce using rule 19 (return_type)


State 13

   37 proc: return_type • Name OP declaration CP OB stmt_seq CB

    ID  shift, and go to state 16

    Name  go to state 19


State 14

    9 pgm: struct_ •

    $default  reduce using rule 9 (pgm)


State 15

    8 pgm: proc • pgm2

    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    STRUCT  shift, and go to state 5
    INT     shift, and go to state 6
    ID      shift, and go to state 7
    STRING  shift, and go to state 8

    $default  reduce using rule 5 (pgm2)

    pgm2         go to state 20
    type         go to state 12
    return_type  go to state 13
    struct_      go to state 21
    proc         go to state 22


State 16

   36 Name: ID •

    $default  reduce using rule 36 (Name)


State 17

   21 struct_: STRUCT Name • OB declaration CB

    OB  shift, and go to state 23


State 18

    4 line: pgm EOL •

    $default  reduce using rule 4 (line)


State 19

   37 proc: return_type Name • OP declaration CP OB stmt_seq CB

    OP  shift, and go to state 24


State 20

    8 pgm: proc pgm2 •

    $default  reduce using rule 8 (pgm)


State 21

    7 pgm2: struct_ • pgm2

    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    STRUCT  shift, and go to state 5
    INT     shift, and go to state 6
    ID      shift, and go to state 7
    STRING  shift, and go to state 8

    $default  reduce using rule 5 (pgm2)

    pgm2         go to state 25
    type         go to state 12
    return_type  go to state 13
    struct_      go to state 21
    proc         go to state 22


State 22

    6 pgm2: proc • pgm2

    BOOL    shift, and go to state 3
    VOID    shift, and go to state 4
    STRUCT  shift, and go to state 5
    INT     shift, and go to state 6
    ID      shift, and go to state 7
    STRING  shift, and go to state 8

    $default  reduce using rule 5 (pgm2)

    pgm2         go to state 26
    type         go to state 12
    return_type  go to state 13
    struct_      go to state 21
    proc         go to state 22


State 23

   21 struct_: STRUCT Name OB • declaration CB

    BOOL    shift, and go to state 3
    INT     shift, and go to state 6
    ID      shift, and go to state 7
    STRING  shift, and go to state 8

    type         go to state 27
    declaration  go to state 28


State 24

   37 proc: return_type Name OP • declaration CP OB stmt_seq CB

    BOOL    shift, and go to state 3
    INT     shift, and go to state 6
    ID      shift, and go to state 7
    STRING  shift, and go to state 8

    type         go to state 27
    declaration  go to state 29


State 25

    7 pgm2: struct_ pgm2 •

    $default  reduce using rule 7 (pgm2)


State 26

    6 pgm2: proc pgm2 •

    $default  reduce using rule 6 (pgm2)


State 27

   17 declaration: type • ID

    ID  shift, and go to state 30


State 28

   18 declaration: declaration • COMMA declaration
   21 struct_: STRUCT Name OB declaration • CB

    CB     shift, and go to state 31
    COMMA  shift, and go to state 32


State 29

   18 declaration: declaration • COMMA declaration
   37 proc: return_type Name OP declaration • CP OB stmt_seq CB

    CP     shift, and go to state 33
    COMMA  shift, and go to state 32


State 30

   17 declaration: type ID •

    $default  reduce using rule 17 (declaration)


State 31

   21 struct_: STRUCT Name OB declaration CB •

    $default  reduce using rule 21 (struct_)


State 32

   18 declaration: declaration COMMA • declaration

    BOOL    shift, and go to state 3
    INT     shift, and go to state 6
    ID      shift, and go to state 7
    STRING  shift, and go to state 8

    type         go to state 27
    declaration  go to state 34


State 33

   37 proc: return_type Name OP declaration CP • OB stmt_seq CB

    OB  shift, and go to state 35


State 34

   18 declaration: declaration • COMMA declaration
   18            | declaration COMMA declaration •

    COMMA  shift, and go to state 32

    COMMA     [reduce using rule 18 (declaration)]
    $default  reduce using rule 18 (declaration)


State 35

   37 proc: return_type Name OP declaration CP OB • stmt_seq CB

    BOOL    shift, and go to state 3
    PRINTF  shift, and go to state 36
    IF      shift, and go to state 37
    FOR     shift, and go to state 38
    RETURN  shift, and go to state 39
    INT     shift, and go to state 6
    ID      shift, and go to state 40
    STRING  shift, and go to state 8
    OB      shift, and go to state 41

    $default  reduce using rule 34 (stmt_seq)

    type      go to state 42
    l_exp     go to state 43
    stmt      go to state 44
    stmt_seq  go to state 45


State 36

   29 stmt: PRINTF • OP STRING CP SEMICOLON

    OP  shift, and go to state 46


State 37

   27 stmt: IF • OP exp CP intern_scope_then stmt
   28     | IF • OP exp CP intern_scope_then stmt intern_scope_else stmt

    OP  shift, and go to state 47


State 38

   26 stmt: FOR • OP ID ASSIGN exp SEMICOLON exp SEMICOLON stmt CP stmt

    OP  shift, and go to state 48


State 39

   30 stmt: RETURN • exp SEMICOLON

    NUMBER  shift, and go to state 49

    $default  reduce using rule 10 (exp)

    exp          go to state 50
    int_literal  go to state 51


State 40

   16 type: ID •
   22 l_exp: ID •
   23      | ID • DOT l_exp

    DOT  shift, and go to state 52

    ASSIGN    reduce using rule 22 (l_exp)
    $default  reduce using rule 16 (type)


State 41

   31 stmt: OB • stmt_seq CB

    BOOL    shift, and go to state 3
    PRINTF  shift, and go to state 36
    IF      shift, and go to state 37
    FOR     shift, and go to state 38
    RETURN  shift, and go to state 39
    INT     shift, and go to state 6
    ID      shift, and go to state 40
    STRING  shift, and go to state 8
    OB      shift, and go to state 41

    $default  reduce using rule 34 (stmt_seq)

    type      go to state 42
    l_exp     go to state 43
    stmt      go to state 44
    stmt_seq  go to state 53


State 42

   32 stmt: type • ID SEMICOLON

    ID  shift, and go to state 54


State 43

   33 stmt: l_exp • ASSIGN exp SEMICOLON

    ASSIGN  shift, and go to state 55


State 44

   35 stmt_seq: stmt • stmt_seq

    BOOL    shift, and go to state 3
    PRINTF  shift, and go to state 36
    IF      shift, and go to state 37
    FOR     shift, and go to state 38
    RETURN  shift, and go to state 39
    INT     shift, and go to state 6
    ID      shift, and go to state 40
    STRING  shift, and go to state 8
    OB      shift, and go to state 41

    $default  reduce using rule 34 (stmt_seq)

    type      go to state 42
    l_exp     go to state 43
    stmt      go to state 44
    stmt_seq  go to state 56


State 45

   37 proc: return_type Name OP declaration CP OB stmt_seq • CB

    CB  shift, and go to state 57


State 46

   29 stmt: PRINTF OP • STRING CP SEMICOLON

    STRING  shift, and go to state 58


State 47

   27 stmt: IF OP • exp CP intern_scope_then stmt
   28     | IF OP • exp CP intern_scope_then stmt intern_scope_else stmt

    NUMBER  shift, and go to state 49

    $default  reduce using rule 10 (exp)

    exp          go to state 59
    int_literal  go to state 51


State 48

   26 stmt: FOR OP • ID ASSIGN exp SEMICOLON exp SEMICOLON stmt CP stmt

    ID  shift, and go to state 60


State 49

   12 int_literal: NUMBER •

    $default  reduce using rule 12 (int_literal)


State 50

   30 stmt: RETURN exp • SEMICOLON

    SEMICOLON  shift, and go to state 61


State 51

   11 exp: int_literal •

    $default  reduce using rule 11 (exp)


State 52

   23 l_exp: ID DOT • l_exp

    ID  shift, and go to state 62

    l_exp  go to state 63


State 53

   31 stmt: OB stmt_seq • CB

    CB  shift, and go to state 64


State 54

   32 stmt: type ID • SEMICOLON

    SEMICOLON  shift, and go to state 65


State 55

   33 stmt: l_exp ASSIGN • exp SEMICOLON

    NUMBER  shift, and go to state 49

    $default  reduce using rule 10 (exp)

    exp          go to state 66
    int_literal  go to state 51


State 56

   35 stmt_seq: stmt stmt_seq •

    $default  reduce using rule 35 (stmt_seq)


State 57

   37 proc: return_type Name OP declaration CP OB stmt_seq CB •

    $default  reduce using rule 37 (proc)


State 58

   29 stmt: PRINTF OP STRING • CP SEMICOLON

    CP  shift, and go to state 67


State 59

   27 stmt: IF OP exp • CP intern_scope_then stmt
   28     | IF OP exp • CP intern_scope_then stmt intern_scope_else stmt

    CP  shift, and go to state 68


State 60

   26 stmt: FOR OP ID • ASSIGN exp SEMICOLON exp SEMICOLON stmt CP stmt

    ASSIGN  shift, and go to state 69


State 61

   30 stmt: RETURN exp SEMICOLON •

    $default  reduce using rule 30 (stmt)


State 62

   22 l_exp: ID •
   23      | ID • DOT l_exp

    DOT  shift, and go to state 52

    $default  reduce using rule 22 (l_exp)


State 63

   23 l_exp: ID DOT l_exp •

    $default  reduce using rule 23 (l_exp)


State 64

   31 stmt: OB stmt_seq CB •

    $default  reduce using rule 31 (stmt)


State 65

   32 stmt: type ID SEMICOLON •

    $default  reduce using rule 32 (stmt)


State 66

   33 stmt: l_exp ASSIGN exp • SEMICOLON

    SEMICOLON  shift, and go to state 70


State 67

   29 stmt: PRINTF OP STRING CP • SEMICOLON

    SEMICOLON  shift, and go to state 71


State 68

   27 stmt: IF OP exp CP • intern_scope_then stmt
   28     | IF OP exp CP • intern_scope_then stmt intern_scope_else stmt

    THEN  shift, and go to state 72

    intern_scope_then  go to state 73


State 69

   26 stmt: FOR OP ID ASSIGN • exp SEMICOLON exp SEMICOLON stmt CP stmt

    NUMBER  shift, and go to state 49

    $default  reduce using rule 10 (exp)

    exp          go to state 74
    int_literal  go to state 51


State 70

   33 stmt: l_exp ASSIGN exp SEMICOLON •

    $default  reduce using rule 33 (stmt)


State 71

   29 stmt: PRINTF OP STRING CP SEMICOLON •

    $default  reduce using rule 29 (stmt)


State 72

   24 intern_scope_then: THEN •

    $default  reduce using rule 24 (intern_scope_then)


State 73

   27 stmt: IF OP exp CP intern_scope_then • stmt
   28     | IF OP exp CP intern_scope_then • stmt intern_scope_else stmt

    BOOL    shift, and go to state 3
    PRINTF  shift, and go to state 36
    IF      shift, and go to state 37
    FOR     shift, and go to state 38
    RETURN  shift, and go to state 39
    INT     shift, and go to state 6
    ID      shift, and go to state 40
    STRING  shift, and go to state 8
    OB      shift, and go to state 41

    type   go to state 42
    l_exp  go to state 43
    stmt   go to state 75


State 74

   26 stmt: FOR OP ID ASSIGN exp • SEMICOLON exp SEMICOLON stmt CP stmt

    SEMICOLON  shift, and go to state 76


State 75

   27 stmt: IF OP exp CP intern_scope_then stmt •
   28     | IF OP exp CP intern_scope_then stmt • intern_scope_else stmt

    ELSE  shift, and go to state 77

    ELSE      [reduce using rule 27 (stmt)]
    $default  reduce using rule 27 (stmt)

    intern_scope_else  go to state 78


State 76

   26 stmt: FOR OP ID ASSIGN exp SEMICOLON • exp SEMICOLON stmt CP stmt

    NUMBER  shift, and go to state 49

    $default  reduce using rule 10 (exp)

    exp          go to state 79
    int_literal  go to state 51


State 77

   25 intern_scope_else: ELSE •

    $default  reduce using rule 25 (intern_scope_else)


State 78

   28 stmt: IF OP exp CP intern_scope_then stmt intern_scope_else • stmt

    BOOL    shift, and go to state 3
    PRINTF  shift, and go to state 36
    IF      shift, and go to state 37
    FOR     shift, and go to state 38
    RETURN  shift, and go to state 39
    INT     shift, and go to state 6
    ID      shift, and go to state 40
    STRING  shift, and go to state 8
    OB      shift, and go to state 41

    type   go to state 42
    l_exp  go to state 43
    stmt   go to state 80


State 79

   26 stmt: FOR OP ID ASSIGN exp SEMICOLON exp • SEMICOLON stmt CP stmt

    SEMICOLON  shift, and go to state 81


State 80

   28 stmt: IF OP exp CP intern_scope_then stmt intern_scope_else stmt •

    $default  reduce using rule 28 (stmt)


State 81

   26 stmt: FOR OP ID ASSIGN exp SEMICOLON exp SEMICOLON • stmt CP stmt

    BOOL    shift, and go to state 3
    PRINTF  shift, and go to state 36
    IF      shift, and go to state 37
    FOR     shift, and go to state 38
    RETURN  shift, and go to state 39
    INT     shift, and go to state 6
    ID      shift, and go to state 40
    STRING  shift, and go to state 8
    OB      shift, and go to state 41

    type   go to state 42
    l_exp  go to state 43
    stmt   go to state 82


State 82

   26 stmt: FOR OP ID ASSIGN exp SEMICOLON exp SEMICOLON stmt • CP stmt

    CP  shift, and go to state 83


State 83

   26 stmt: FOR OP ID ASSIGN exp SEMICOLON exp SEMICOLON stmt CP • stmt

    BOOL    shift, and go to state 3
    PRINTF  shift, and go to state 36
    IF      shift, and go to state 37
    FOR     shift, and go to state 38
    RETURN  shift, and go to state 39
    INT     shift, and go to state 6
    ID      shift, and go to state 40
    STRING  shift, and go to state 8
    OB      shift, and go to state 41

    type   go to state 42
    l_exp  go to state 43
    stmt   go to state 84


State 84

   26 stmt: FOR OP ID ASSIGN exp SEMICOLON exp SEMICOLON stmt CP stmt •

    $default  reduce using rule 26 (stmt)
